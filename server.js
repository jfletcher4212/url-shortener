 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var db = require('./database');
var app = express();

const uriScheme = "^[a-zA-Z][a-zA-Z0-9+.-]*:";
const domainLabel = "[a-zA-Z0-9][a-zA-Z0-9_-]*"
const domainName = "\/\/" + domainLabel + "(\." + domainLabel + ")*"
const uriPath = "((\/[^/].*)|\/)"
const uriFormat = new RegExp(uriScheme + domainName + uriPath + "$" );

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/goto/:id')
    .get(function(req, res) {     
        db.async.goto(req.params.id).then(function(result){
          res.redirect(result);
        }).catch(function(err){
          res.send(err);
        });
});

//app.route('/new/url')
app.route(/\/new\/(.+)/)
    .get(function(req, res) {
      if(uriFormat.test(req.params[0])){ //params[0] consists of everything after '/new/'
        var url = db.async.insert(req.params[0]).then(function(result) {
          res.send(result);
        }).catch( function(err) {
          res.send(err);
        });
      } else {
         res.send("Invalid URL");
      }
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

